// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mysteriumnetwork/iqp/enterprise (interfaces: EnterpriseBlockchain)

// Package mocks is a generated GoMock package.
package mocks

import (
	big "math/big"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
	eip155 "github.com/mysteriumnetwork/iqp/blockchain/eip155"
)

// MockEnterpriseBlockchain is a mock of EnterpriseBlockchain interface.
type MockEnterpriseBlockchain struct {
	ctrl     *gomock.Controller
	recorder *MockEnterpriseBlockchainMockRecorder
}

// MockEnterpriseBlockchainMockRecorder is the mock recorder for MockEnterpriseBlockchain.
type MockEnterpriseBlockchainMockRecorder struct {
	mock *MockEnterpriseBlockchain
}

// NewMockEnterpriseBlockchain creates a new mock instance.
func NewMockEnterpriseBlockchain(ctrl *gomock.Controller) *MockEnterpriseBlockchain {
	mock := &MockEnterpriseBlockchain{ctrl: ctrl}
	mock.recorder = &MockEnterpriseBlockchainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnterpriseBlockchain) EXPECT() *MockEnterpriseBlockchainMockRecorder {
	return m.recorder
}

// ApproveLiquidityTokensToEnterprise mocks base method.
func (m *MockEnterpriseBlockchain) ApproveLiquidityTokensToEnterprise(arg0 common.Address, arg1 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveLiquidityTokensToEnterprise", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApproveLiquidityTokensToEnterprise indicates an expected call of ApproveLiquidityTokensToEnterprise.
func (mr *MockEnterpriseBlockchainMockRecorder) ApproveLiquidityTokensToEnterprise(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveLiquidityTokensToEnterprise", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).ApproveLiquidityTokensToEnterprise), arg0, arg1)
}

// ApproveLiquidityTokensToService mocks base method.
func (m *MockEnterpriseBlockchain) ApproveLiquidityTokensToService(arg0 common.Address, arg1 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveLiquidityTokensToService", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApproveLiquidityTokensToService indicates an expected call of ApproveLiquidityTokensToService.
func (mr *MockEnterpriseBlockchainMockRecorder) ApproveLiquidityTokensToService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveLiquidityTokensToService", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).ApproveLiquidityTokensToService), arg0, arg1)
}

// ClaimStakingReward mocks base method.
func (m *MockEnterpriseBlockchain) ClaimStakingReward(arg0 common.Address, arg1 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClaimStakingReward", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClaimStakingReward indicates an expected call of ClaimStakingReward.
func (mr *MockEnterpriseBlockchainMockRecorder) ClaimStakingReward(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimStakingReward", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).ClaimStakingReward), arg0, arg1)
}

// DecreaseStake mocks base method.
func (m *MockEnterpriseBlockchain) DecreaseStake(arg0 common.Address, arg1, arg2 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecreaseStake", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecreaseStake indicates an expected call of DecreaseStake.
func (mr *MockEnterpriseBlockchainMockRecorder) DecreaseStake(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecreaseStake", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).DecreaseStake), arg0, arg1, arg2)
}

// EstimateRentalFee mocks base method.
func (m *MockEnterpriseBlockchain) EstimateRentalFee(arg0, arg1 common.Address, arg2 *big.Int, arg3 uint32) (eip155.LoanEstimateDetailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateRentalFee", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(eip155.LoanEstimateDetailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateRentalFee indicates an expected call of EstimateRentalFee.
func (mr *MockEnterpriseBlockchainMockRecorder) EstimateRentalFee(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateRentalFee", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).EstimateRentalFee), arg0, arg1, arg2, arg3)
}

// GetAccountState mocks base method.
func (m *MockEnterpriseBlockchain) GetAccountState(arg0, arg1 common.Address) (eip155.AccountState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountState", arg0, arg1)
	ret0, _ := ret[0].(eip155.AccountState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountState indicates an expected call of GetAccountState.
func (mr *MockEnterpriseBlockchainMockRecorder) GetAccountState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountState", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetAccountState), arg0, arg1)
}

// GetAllowsSwapping mocks base method.
func (m *MockEnterpriseBlockchain) GetAllowsSwapping(arg0 common.Address) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllowsSwapping", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllowsSwapping indicates an expected call of GetAllowsSwapping.
func (mr *MockEnterpriseBlockchainMockRecorder) GetAllowsSwapping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllowsSwapping", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetAllowsSwapping), arg0)
}

// GetAvailableReserve mocks base method.
func (m *MockEnterpriseBlockchain) GetAvailableReserve(arg0 common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableReserve", arg0)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableReserve indicates an expected call of GetAvailableReserve.
func (mr *MockEnterpriseBlockchainMockRecorder) GetAvailableReserve(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableReserve", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetAvailableReserve), arg0)
}

// GetBaseRate mocks base method.
func (m *MockEnterpriseBlockchain) GetBaseRate(arg0 common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseRate", arg0)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaseRate indicates an expected call of GetBaseRate.
func (mr *MockEnterpriseBlockchainMockRecorder) GetBaseRate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseRate", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetBaseRate), arg0)
}

// GetBaseTokenAddress mocks base method.
func (m *MockEnterpriseBlockchain) GetBaseTokenAddress(arg0 common.Address) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseTokenAddress", arg0)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaseTokenAddress indicates an expected call of GetBaseTokenAddress.
func (mr *MockEnterpriseBlockchainMockRecorder) GetBaseTokenAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseTokenAddress", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetBaseTokenAddress), arg0)
}

// GetBaseUri mocks base method.
func (m *MockEnterpriseBlockchain) GetBaseUri(arg0 common.Address) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseUri", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaseUri indicates an expected call of GetBaseUri.
func (mr *MockEnterpriseBlockchainMockRecorder) GetBaseUri(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseUri", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetBaseUri), arg0)
}

// GetBondingCurve mocks base method.
func (m *MockEnterpriseBlockchain) GetBondingCurve(arg0 common.Address) (eip155.BondingCurve, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBondingCurve", arg0)
	ret0, _ := ret[0].(eip155.BondingCurve)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBondingCurve indicates an expected call of GetBondingCurve.
func (mr *MockEnterpriseBlockchainMockRecorder) GetBondingCurve(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBondingCurve", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetBondingCurve), arg0)
}

// GetChainID mocks base method.
func (m *MockEnterpriseBlockchain) GetChainID() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainID")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainID indicates an expected call of GetChainID.
func (mr *MockEnterpriseBlockchainMockRecorder) GetChainID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainID", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetChainID))
}

// GetConverterAddress mocks base method.
func (m *MockEnterpriseBlockchain) GetConverterAddress(arg0 common.Address) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConverterAddress", arg0)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConverterAddress indicates an expected call of GetConverterAddress.
func (mr *MockEnterpriseBlockchainMockRecorder) GetConverterAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConverterAddress", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetConverterAddress), arg0)
}

// GetEnergyAt mocks base method.
func (m *MockEnterpriseBlockchain) GetEnergyAt(arg0, arg1 common.Address, arg2 uint32) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnergyAt", arg0, arg1, arg2)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnergyAt indicates an expected call of GetEnergyAt.
func (mr *MockEnterpriseBlockchainMockRecorder) GetEnergyAt(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnergyAt", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetEnergyAt), arg0, arg1, arg2)
}

// GetEnergyGapHalvingPeriod mocks base method.
func (m *MockEnterpriseBlockchain) GetEnergyGapHalvingPeriod(arg0 common.Address) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnergyGapHalvingPeriod", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnergyGapHalvingPeriod indicates an expected call of GetEnergyGapHalvingPeriod.
func (mr *MockEnterpriseBlockchainMockRecorder) GetEnergyGapHalvingPeriod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnergyGapHalvingPeriod", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetEnergyGapHalvingPeriod), arg0)
}

// GetEnterpriseCollectorAddress mocks base method.
func (m *MockEnterpriseBlockchain) GetEnterpriseCollectorAddress(arg0 common.Address) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnterpriseCollectorAddress", arg0)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnterpriseCollectorAddress indicates an expected call of GetEnterpriseCollectorAddress.
func (mr *MockEnterpriseBlockchainMockRecorder) GetEnterpriseCollectorAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnterpriseCollectorAddress", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetEnterpriseCollectorAddress), arg0)
}

// GetEnterpriseInfo mocks base method.
func (m *MockEnterpriseBlockchain) GetEnterpriseInfo(arg0 common.Address) (eip155.EnterpriseInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnterpriseInfo", arg0)
	ret0, _ := ret[0].(eip155.EnterpriseInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnterpriseInfo indicates an expected call of GetEnterpriseInfo.
func (mr *MockEnterpriseBlockchainMockRecorder) GetEnterpriseInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnterpriseInfo", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetEnterpriseInfo), arg0)
}

// GetEnterpriseTokenAddress mocks base method.
func (m *MockEnterpriseBlockchain) GetEnterpriseTokenAddress(arg0 common.Address) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnterpriseTokenAddress", arg0)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnterpriseTokenAddress indicates an expected call of GetEnterpriseTokenAddress.
func (mr *MockEnterpriseBlockchainMockRecorder) GetEnterpriseTokenAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnterpriseTokenAddress", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetEnterpriseTokenAddress), arg0)
}

// GetEnterpriseWalletAddress mocks base method.
func (m *MockEnterpriseBlockchain) GetEnterpriseWalletAddress(arg0 common.Address) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnterpriseWalletAddress", arg0)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnterpriseWalletAddress indicates an expected call of GetEnterpriseWalletAddress.
func (mr *MockEnterpriseBlockchainMockRecorder) GetEnterpriseWalletAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnterpriseWalletAddress", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetEnterpriseWalletAddress), arg0)
}

// GetGCFeePercent mocks base method.
func (m *MockEnterpriseBlockchain) GetGCFeePercent(arg0 common.Address) (uint16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGCFeePercent", arg0)
	ret0, _ := ret[0].(uint16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGCFeePercent indicates an expected call of GetGCFeePercent.
func (mr *MockEnterpriseBlockchainMockRecorder) GetGCFeePercent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGCFeePercent", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetGCFeePercent), arg0)
}

// GetInterestReserveHalvingPeriod mocks base method.
func (m *MockEnterpriseBlockchain) GetInterestReserveHalvingPeriod(arg0 common.Address) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterestReserveHalvingPeriod", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterestReserveHalvingPeriod indicates an expected call of GetInterestReserveHalvingPeriod.
func (mr *MockEnterpriseBlockchainMockRecorder) GetInterestReserveHalvingPeriod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterestReserveHalvingPeriod", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetInterestReserveHalvingPeriod), arg0)
}

// GetLiquidityTokenEnterpriseAllowance mocks base method.
func (m *MockEnterpriseBlockchain) GetLiquidityTokenEnterpriseAllowance(arg0, arg1 common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLiquidityTokenEnterpriseAllowance", arg0, arg1)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLiquidityTokenEnterpriseAllowance indicates an expected call of GetLiquidityTokenEnterpriseAllowance.
func (mr *MockEnterpriseBlockchainMockRecorder) GetLiquidityTokenEnterpriseAllowance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLiquidityTokenEnterpriseAllowance", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetLiquidityTokenEnterpriseAllowance), arg0, arg1)
}

// GetMaxRentalDuration mocks base method.
func (m *MockEnterpriseBlockchain) GetMaxRentalDuration(arg0 common.Address) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxRentalDuration", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxRentalDuration indicates an expected call of GetMaxRentalDuration.
func (mr *MockEnterpriseBlockchainMockRecorder) GetMaxRentalDuration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxRentalDuration", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetMaxRentalDuration), arg0)
}

// GetMinGCFee mocks base method.
func (m *MockEnterpriseBlockchain) GetMinGCFee(arg0 common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinGCFee", arg0)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinGCFee indicates an expected call of GetMinGCFee.
func (mr *MockEnterpriseBlockchainMockRecorder) GetMinGCFee(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinGCFee", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetMinGCFee), arg0)
}

// GetMinRentalDuration mocks base method.
func (m *MockEnterpriseBlockchain) GetMinRentalDuration(arg0 common.Address) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinRentalDuration", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinRentalDuration indicates an expected call of GetMinRentalDuration.
func (mr *MockEnterpriseBlockchainMockRecorder) GetMinRentalDuration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinRentalDuration", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetMinRentalDuration), arg0)
}

// GetPaymentTokenIDs mocks base method.
func (m *MockEnterpriseBlockchain) GetPaymentTokenIDs(arg0, arg1, arg2 common.Address) ([]*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentTokenIDs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentTokenIDs indicates an expected call of GetPaymentTokenIDs.
func (mr *MockEnterpriseBlockchainMockRecorder) GetPaymentTokenIDs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentTokenIDs", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetPaymentTokenIDs), arg0, arg1, arg2)
}

// GetPowerTokenAvailableBalance mocks base method.
func (m *MockEnterpriseBlockchain) GetPowerTokenAvailableBalance(arg0, arg1 common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPowerTokenAvailableBalance", arg0, arg1)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPowerTokenAvailableBalance indicates an expected call of GetPowerTokenAvailableBalance.
func (mr *MockEnterpriseBlockchainMockRecorder) GetPowerTokenAvailableBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPowerTokenAvailableBalance", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetPowerTokenAvailableBalance), arg0, arg1)
}

// GetPowerTokenBalance mocks base method.
func (m *MockEnterpriseBlockchain) GetPowerTokenBalance(arg0, arg1 common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPowerTokenBalance", arg0, arg1)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPowerTokenBalance indicates an expected call of GetPowerTokenBalance.
func (mr *MockEnterpriseBlockchainMockRecorder) GetPowerTokenBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPowerTokenBalance", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetPowerTokenBalance), arg0, arg1)
}

// GetProxyAdminAddress mocks base method.
func (m *MockEnterpriseBlockchain) GetProxyAdminAddress(arg0 common.Address) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProxyAdminAddress", arg0)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProxyAdminAddress indicates an expected call of GetProxyAdminAddress.
func (mr *MockEnterpriseBlockchainMockRecorder) GetProxyAdminAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProxyAdminAddress", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetProxyAdminAddress), arg0)
}

// GetProxyAdminTokenServiceAllowance mocks base method.
func (m *MockEnterpriseBlockchain) GetProxyAdminTokenServiceAllowance(arg0, arg1 common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProxyAdminTokenServiceAllowance", arg0, arg1)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProxyAdminTokenServiceAllowance indicates an expected call of GetProxyAdminTokenServiceAllowance.
func (mr *MockEnterpriseBlockchainMockRecorder) GetProxyAdminTokenServiceAllowance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProxyAdminTokenServiceAllowance", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetProxyAdminTokenServiceAllowance), arg0, arg1)
}

// GetRentalAgreement mocks base method.
func (m *MockEnterpriseBlockchain) GetRentalAgreement(arg0 common.Address, arg1 *big.Int) (eip155.LoanInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRentalAgreement", arg0, arg1)
	ret0, _ := ret[0].(eip155.LoanInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRentalAgreement indicates an expected call of GetRentalAgreement.
func (mr *MockEnterpriseBlockchainMockRecorder) GetRentalAgreement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRentalAgreement", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetRentalAgreement), arg0, arg1)
}

// GetRentalTokenIDs mocks base method.
func (m *MockEnterpriseBlockchain) GetRentalTokenIDs(arg0, arg1 common.Address) ([]*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRentalTokenIDs", arg0, arg1)
	ret0, _ := ret[0].([]*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRentalTokenIDs indicates an expected call of GetRentalTokenIDs.
func (mr *MockEnterpriseBlockchainMockRecorder) GetRentalTokenIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRentalTokenIDs", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetRentalTokenIDs), arg0, arg1)
}

// GetRenterOnlyReturnPeriod mocks base method.
func (m *MockEnterpriseBlockchain) GetRenterOnlyReturnPeriod(arg0 common.Address) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRenterOnlyReturnPeriod", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRenterOnlyReturnPeriod indicates an expected call of GetRenterOnlyReturnPeriod.
func (mr *MockEnterpriseBlockchainMockRecorder) GetRenterOnlyReturnPeriod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRenterOnlyReturnPeriod", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetRenterOnlyReturnPeriod), arg0)
}

// GetReserve mocks base method.
func (m *MockEnterpriseBlockchain) GetReserve(arg0 common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReserve", arg0)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReserve indicates an expected call of GetReserve.
func (mr *MockEnterpriseBlockchainMockRecorder) GetReserve(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReserve", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetReserve), arg0)
}

// GetServiceFeePercent mocks base method.
func (m *MockEnterpriseBlockchain) GetServiceFeePercent(arg0 common.Address) (uint16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceFeePercent", arg0)
	ret0, _ := ret[0].(uint16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceFeePercent indicates an expected call of GetServiceFeePercent.
func (mr *MockEnterpriseBlockchainMockRecorder) GetServiceFeePercent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceFeePercent", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetServiceFeePercent), arg0)
}

// GetServiceIndex mocks base method.
func (m *MockEnterpriseBlockchain) GetServiceIndex(arg0 common.Address) (uint16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceIndex", arg0)
	ret0, _ := ret[0].(uint16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceIndex indicates an expected call of GetServiceIndex.
func (mr *MockEnterpriseBlockchainMockRecorder) GetServiceIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceIndex", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetServiceIndex), arg0)
}

// GetServiceInfo mocks base method.
func (m *MockEnterpriseBlockchain) GetServiceInfo(arg0 common.Address) (eip155.ServiceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceInfo", arg0)
	ret0, _ := ret[0].(eip155.ServiceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceInfo indicates an expected call of GetServiceInfo.
func (mr *MockEnterpriseBlockchainMockRecorder) GetServiceInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceInfo", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetServiceInfo), arg0)
}

// GetServices mocks base method.
func (m *MockEnterpriseBlockchain) GetServices(arg0 common.Address) ([]common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServices", arg0)
	ret0, _ := ret[0].([]common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServices indicates an expected call of GetServices.
func (mr *MockEnterpriseBlockchainMockRecorder) GetServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServices", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetServices), arg0)
}

// GetStake mocks base method.
func (m *MockEnterpriseBlockchain) GetStake(arg0 common.Address, arg1 *big.Int) (eip155.Stake, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStake", arg0, arg1)
	ret0, _ := ret[0].(eip155.Stake)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStake indicates an expected call of GetStake.
func (mr *MockEnterpriseBlockchainMockRecorder) GetStake(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStake", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetStake), arg0, arg1)
}

// GetStakingReward mocks base method.
func (m *MockEnterpriseBlockchain) GetStakingReward(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStakingReward", arg0, arg1)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStakingReward indicates an expected call of GetStakingReward.
func (mr *MockEnterpriseBlockchainMockRecorder) GetStakingReward(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStakingReward", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetStakingReward), arg0, arg1)
}

// GetUsedReserve mocks base method.
func (m *MockEnterpriseBlockchain) GetUsedReserve(arg0 common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsedReserve", arg0)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsedReserve indicates an expected call of GetUsedReserve.
func (mr *MockEnterpriseBlockchainMockRecorder) GetUsedReserve(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsedReserve", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).GetUsedReserve), arg0)
}

// IncreaseStake mocks base method.
func (m *MockEnterpriseBlockchain) IncreaseStake(arg0 common.Address, arg1, arg2 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseStake", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncreaseStake indicates an expected call of IncreaseStake.
func (mr *MockEnterpriseBlockchainMockRecorder) IncreaseStake(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseStake", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).IncreaseStake), arg0, arg1, arg2)
}

// IsRegisteredService mocks base method.
func (m *MockEnterpriseBlockchain) IsRegisteredService(arg0, arg1 common.Address) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRegisteredService", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsRegisteredService indicates an expected call of IsRegisteredService.
func (mr *MockEnterpriseBlockchainMockRecorder) IsRegisteredService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRegisteredService", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).IsRegisteredService), arg0, arg1)
}

// ReturnRental mocks base method.
func (m *MockEnterpriseBlockchain) ReturnRental(arg0 common.Address, arg1 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnRental", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReturnRental indicates an expected call of ReturnRental.
func (mr *MockEnterpriseBlockchainMockRecorder) ReturnRental(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnRental", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).ReturnRental), arg0, arg1)
}

// SetBaseRate mocks base method.
func (m *MockEnterpriseBlockchain) SetBaseRate(arg0, arg1 common.Address, arg2, arg3 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBaseRate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBaseRate indicates an expected call of SetBaseRate.
func (mr *MockEnterpriseBlockchainMockRecorder) SetBaseRate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBaseRate", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).SetBaseRate), arg0, arg1, arg2, arg3)
}

// SetBaseUri mocks base method.
func (m *MockEnterpriseBlockchain) SetBaseUri(arg0 common.Address, arg1 string) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBaseUri", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBaseUri indicates an expected call of SetBaseUri.
func (mr *MockEnterpriseBlockchainMockRecorder) SetBaseUri(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBaseUri", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).SetBaseUri), arg0, arg1)
}

// SetBondingCurve mocks base method.
func (m *MockEnterpriseBlockchain) SetBondingCurve(arg0 common.Address, arg1, arg2 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBondingCurve", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBondingCurve indicates an expected call of SetBondingCurve.
func (mr *MockEnterpriseBlockchainMockRecorder) SetBondingCurve(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBondingCurve", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).SetBondingCurve), arg0, arg1, arg2)
}

// SetConverterAddress mocks base method.
func (m *MockEnterpriseBlockchain) SetConverterAddress(arg0, arg1 common.Address) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConverterAddress", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetConverterAddress indicates an expected call of SetConverterAddress.
func (mr *MockEnterpriseBlockchainMockRecorder) SetConverterAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConverterAddress", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).SetConverterAddress), arg0, arg1)
}

// SetEnterpriseCollectorAddress mocks base method.
func (m *MockEnterpriseBlockchain) SetEnterpriseCollectorAddress(arg0, arg1 common.Address) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEnterpriseCollectorAddress", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetEnterpriseCollectorAddress indicates an expected call of SetEnterpriseCollectorAddress.
func (mr *MockEnterpriseBlockchainMockRecorder) SetEnterpriseCollectorAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEnterpriseCollectorAddress", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).SetEnterpriseCollectorAddress), arg0, arg1)
}

// SetEnterpriseLoanCollectionPeriod mocks base method.
func (m *MockEnterpriseBlockchain) SetEnterpriseLoanCollectionPeriod(arg0 common.Address, arg1 uint32) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEnterpriseLoanCollectionPeriod", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetEnterpriseLoanCollectionPeriod indicates an expected call of SetEnterpriseLoanCollectionPeriod.
func (mr *MockEnterpriseBlockchainMockRecorder) SetEnterpriseLoanCollectionPeriod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEnterpriseLoanCollectionPeriod", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).SetEnterpriseLoanCollectionPeriod), arg0, arg1)
}

// SetEnterpriseWalletAddress mocks base method.
func (m *MockEnterpriseBlockchain) SetEnterpriseWalletAddress(arg0, arg1 common.Address) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEnterpriseWalletAddress", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetEnterpriseWalletAddress indicates an expected call of SetEnterpriseWalletAddress.
func (mr *MockEnterpriseBlockchainMockRecorder) SetEnterpriseWalletAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEnterpriseWalletAddress", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).SetEnterpriseWalletAddress), arg0, arg1)
}

// SetGCFeePercent mocks base method.
func (m *MockEnterpriseBlockchain) SetGCFeePercent(arg0 common.Address, arg1 uint16) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGCFeePercent", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetGCFeePercent indicates an expected call of SetGCFeePercent.
func (mr *MockEnterpriseBlockchainMockRecorder) SetGCFeePercent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGCFeePercent", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).SetGCFeePercent), arg0, arg1)
}

// SetInterestReserveHalvingPeriod mocks base method.
func (m *MockEnterpriseBlockchain) SetInterestReserveHalvingPeriod(arg0 common.Address, arg1 uint32) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInterestReserveHalvingPeriod", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetInterestReserveHalvingPeriod indicates an expected call of SetInterestReserveHalvingPeriod.
func (mr *MockEnterpriseBlockchainMockRecorder) SetInterestReserveHalvingPeriod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInterestReserveHalvingPeriod", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).SetInterestReserveHalvingPeriod), arg0, arg1)
}

// SetRentalPeriodLimits mocks base method.
func (m *MockEnterpriseBlockchain) SetRentalPeriodLimits(arg0 common.Address, arg1, arg2 uint32) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRentalPeriodLimits", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRentalPeriodLimits indicates an expected call of SetRentalPeriodLimits.
func (mr *MockEnterpriseBlockchainMockRecorder) SetRentalPeriodLimits(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRentalPeriodLimits", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).SetRentalPeriodLimits), arg0, arg1, arg2)
}

// SetRenterOnlyReturnPeriod mocks base method.
func (m *MockEnterpriseBlockchain) SetRenterOnlyReturnPeriod(arg0 common.Address, arg1 uint32) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRenterOnlyReturnPeriod", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRenterOnlyReturnPeriod indicates an expected call of SetRenterOnlyReturnPeriod.
func (mr *MockEnterpriseBlockchainMockRecorder) SetRenterOnlyReturnPeriod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRenterOnlyReturnPeriod", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).SetRenterOnlyReturnPeriod), arg0, arg1)
}

// SetServiceFeePercent mocks base method.
func (m *MockEnterpriseBlockchain) SetServiceFeePercent(arg0 common.Address, arg1 uint16) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetServiceFeePercent", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetServiceFeePercent indicates an expected call of SetServiceFeePercent.
func (mr *MockEnterpriseBlockchainMockRecorder) SetServiceFeePercent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServiceFeePercent", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).SetServiceFeePercent), arg0, arg1)
}

// Stake mocks base method.
func (m *MockEnterpriseBlockchain) Stake(arg0 common.Address, arg1 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stake", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stake indicates an expected call of Stake.
func (mr *MockEnterpriseBlockchainMockRecorder) Stake(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stake", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).Stake), arg0, arg1)
}

// SwapIn mocks base method.
func (m *MockEnterpriseBlockchain) SwapIn(arg0 common.Address, arg1 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwapIn", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwapIn indicates an expected call of SwapIn.
func (mr *MockEnterpriseBlockchainMockRecorder) SwapIn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwapIn", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).SwapIn), arg0, arg1)
}

// SwapOut mocks base method.
func (m *MockEnterpriseBlockchain) SwapOut(arg0 common.Address, arg1 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwapOut", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwapOut indicates an expected call of SwapOut.
func (mr *MockEnterpriseBlockchainMockRecorder) SwapOut(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwapOut", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).SwapOut), arg0, arg1)
}

// Unstake mocks base method.
func (m *MockEnterpriseBlockchain) Unstake(arg0 common.Address, arg1 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unstake", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unstake indicates an expected call of Unstake.
func (mr *MockEnterpriseBlockchainMockRecorder) Unstake(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unstake", reflect.TypeOf((*MockEnterpriseBlockchain)(nil).Unstake), arg0, arg1)
}
