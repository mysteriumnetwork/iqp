// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mysteriumnetwork/iqp/enterprise (interfaces: ServiceBlockchain)

// Package mocks is a generated GoMock package.
package mocks

import (
	big "math/big"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
	eip155 "github.com/mysteriumnetwork/iqp/blockchain/eip155"
)

// MockServiceBlockchain is a mock of ServiceBlockchain interface.
type MockServiceBlockchain struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBlockchainMockRecorder
}

// MockServiceBlockchainMockRecorder is the mock recorder for MockServiceBlockchain.
type MockServiceBlockchainMockRecorder struct {
	mock *MockServiceBlockchain
}

// NewMockServiceBlockchain creates a new mock instance.
func NewMockServiceBlockchain(ctrl *gomock.Controller) *MockServiceBlockchain {
	mock := &MockServiceBlockchain{ctrl: ctrl}
	mock.recorder = &MockServiceBlockchainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBlockchain) EXPECT() *MockServiceBlockchainMockRecorder {
	return m.recorder
}

// ApproveLiquidityTokensToService mocks base method.
func (m *MockServiceBlockchain) ApproveLiquidityTokensToService(arg0 common.Address, arg1 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveLiquidityTokensToService", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApproveLiquidityTokensToService indicates an expected call of ApproveLiquidityTokensToService.
func (mr *MockServiceBlockchainMockRecorder) ApproveLiquidityTokensToService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveLiquidityTokensToService", reflect.TypeOf((*MockServiceBlockchain)(nil).ApproveLiquidityTokensToService), arg0, arg1)
}

// EstimateLoanDetailed mocks base method.
func (m *MockServiceBlockchain) EstimateLoanDetailed(arg0, arg1 common.Address, arg2 *big.Int, arg3 uint32) (eip155.LoanEstimateDetailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateLoanDetailed", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(eip155.LoanEstimateDetailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateLoanDetailed indicates an expected call of EstimateLoanDetailed.
func (mr *MockServiceBlockchainMockRecorder) EstimateLoanDetailed(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateLoanDetailed", reflect.TypeOf((*MockServiceBlockchain)(nil).EstimateLoanDetailed), arg0, arg1, arg2, arg3)
}

// GetAccountState mocks base method.
func (m *MockServiceBlockchain) GetAccountState(arg0, arg1 common.Address) (eip155.AccountState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountState", arg0, arg1)
	ret0, _ := ret[0].(eip155.AccountState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountState indicates an expected call of GetAccountState.
func (mr *MockServiceBlockchainMockRecorder) GetAccountState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountState", reflect.TypeOf((*MockServiceBlockchain)(nil).GetAccountState), arg0, arg1)
}

// GetAllowsPerpetual mocks base method.
func (m *MockServiceBlockchain) GetAllowsPerpetual(arg0 common.Address) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllowsPerpetual", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllowsPerpetual indicates an expected call of GetAllowsPerpetual.
func (mr *MockServiceBlockchainMockRecorder) GetAllowsPerpetual(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllowsPerpetual", reflect.TypeOf((*MockServiceBlockchain)(nil).GetAllowsPerpetual), arg0)
}

// GetBaseRate mocks base method.
func (m *MockServiceBlockchain) GetBaseRate(arg0 common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseRate", arg0)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaseRate indicates an expected call of GetBaseRate.
func (mr *MockServiceBlockchainMockRecorder) GetBaseRate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseRate", reflect.TypeOf((*MockServiceBlockchain)(nil).GetBaseRate), arg0)
}

// GetBaseTokenAddress mocks base method.
func (m *MockServiceBlockchain) GetBaseTokenAddress(arg0 common.Address) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseTokenAddress", arg0)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaseTokenAddress indicates an expected call of GetBaseTokenAddress.
func (mr *MockServiceBlockchainMockRecorder) GetBaseTokenAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseTokenAddress", reflect.TypeOf((*MockServiceBlockchain)(nil).GetBaseTokenAddress), arg0)
}

// GetChainID mocks base method.
func (m *MockServiceBlockchain) GetChainID() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainID")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainID indicates an expected call of GetChainID.
func (mr *MockServiceBlockchainMockRecorder) GetChainID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainID", reflect.TypeOf((*MockServiceBlockchain)(nil).GetChainID))
}

// GetEnergyAt mocks base method.
func (m *MockServiceBlockchain) GetEnergyAt(arg0, arg1 common.Address, arg2 uint32) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnergyAt", arg0, arg1, arg2)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnergyAt indicates an expected call of GetEnergyAt.
func (mr *MockServiceBlockchainMockRecorder) GetEnergyAt(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnergyAt", reflect.TypeOf((*MockServiceBlockchain)(nil).GetEnergyAt), arg0, arg1, arg2)
}

// GetGapHalvingPeriod mocks base method.
func (m *MockServiceBlockchain) GetGapHalvingPeriod(arg0 common.Address) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGapHalvingPeriod", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGapHalvingPeriod indicates an expected call of GetGapHalvingPeriod.
func (mr *MockServiceBlockchainMockRecorder) GetGapHalvingPeriod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGapHalvingPeriod", reflect.TypeOf((*MockServiceBlockchain)(nil).GetGapHalvingPeriod), arg0)
}

// GetLiquidityTokenServiceAllowance mocks base method.
func (m *MockServiceBlockchain) GetLiquidityTokenServiceAllowance(arg0, arg1 common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLiquidityTokenServiceAllowance", arg0, arg1)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLiquidityTokenServiceAllowance indicates an expected call of GetLiquidityTokenServiceAllowance.
func (mr *MockServiceBlockchainMockRecorder) GetLiquidityTokenServiceAllowance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLiquidityTokenServiceAllowance", reflect.TypeOf((*MockServiceBlockchain)(nil).GetLiquidityTokenServiceAllowance), arg0, arg1)
}

// GetMaxLoanDuration mocks base method.
func (m *MockServiceBlockchain) GetMaxLoanDuration(arg0 common.Address) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxLoanDuration", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxLoanDuration indicates an expected call of GetMaxLoanDuration.
func (mr *MockServiceBlockchainMockRecorder) GetMaxLoanDuration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxLoanDuration", reflect.TypeOf((*MockServiceBlockchain)(nil).GetMaxLoanDuration), arg0)
}

// GetMinGCFee mocks base method.
func (m *MockServiceBlockchain) GetMinGCFee(arg0 common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinGCFee", arg0)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinGCFee indicates an expected call of GetMinGCFee.
func (mr *MockServiceBlockchainMockRecorder) GetMinGCFee(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinGCFee", reflect.TypeOf((*MockServiceBlockchain)(nil).GetMinGCFee), arg0)
}

// GetMinLoanDuration mocks base method.
func (m *MockServiceBlockchain) GetMinLoanDuration(arg0 common.Address) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinLoanDuration", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinLoanDuration indicates an expected call of GetMinLoanDuration.
func (mr *MockServiceBlockchainMockRecorder) GetMinLoanDuration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinLoanDuration", reflect.TypeOf((*MockServiceBlockchain)(nil).GetMinLoanDuration), arg0)
}

// GetPowerTokenAvailableBalance mocks base method.
func (m *MockServiceBlockchain) GetPowerTokenAvailableBalance(arg0, arg1 common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPowerTokenAvailableBalance", arg0, arg1)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPowerTokenAvailableBalance indicates an expected call of GetPowerTokenAvailableBalance.
func (mr *MockServiceBlockchainMockRecorder) GetPowerTokenAvailableBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPowerTokenAvailableBalance", reflect.TypeOf((*MockServiceBlockchain)(nil).GetPowerTokenAvailableBalance), arg0, arg1)
}

// GetPowerTokenBalance mocks base method.
func (m *MockServiceBlockchain) GetPowerTokenBalance(arg0, arg1 common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPowerTokenBalance", arg0, arg1)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPowerTokenBalance indicates an expected call of GetPowerTokenBalance.
func (mr *MockServiceBlockchainMockRecorder) GetPowerTokenBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPowerTokenBalance", reflect.TypeOf((*MockServiceBlockchain)(nil).GetPowerTokenBalance), arg0, arg1)
}

// GetServiceFeePercent mocks base method.
func (m *MockServiceBlockchain) GetServiceFeePercent(arg0 common.Address) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceFeePercent", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceFeePercent indicates an expected call of GetServiceFeePercent.
func (mr *MockServiceBlockchainMockRecorder) GetServiceFeePercent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceFeePercent", reflect.TypeOf((*MockServiceBlockchain)(nil).GetServiceFeePercent), arg0)
}

// GetServiceIndex mocks base method.
func (m *MockServiceBlockchain) GetServiceIndex(arg0 common.Address) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceIndex", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceIndex indicates an expected call of GetServiceIndex.
func (mr *MockServiceBlockchainMockRecorder) GetServiceIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceIndex", reflect.TypeOf((*MockServiceBlockchain)(nil).GetServiceIndex), arg0)
}

// GetServiceInfo mocks base method.
func (m *MockServiceBlockchain) GetServiceInfo(arg0 common.Address) (eip155.ServiceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceInfo", arg0)
	ret0, _ := ret[0].(eip155.ServiceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceInfo indicates an expected call of GetServiceInfo.
func (mr *MockServiceBlockchainMockRecorder) GetServiceInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceInfo", reflect.TypeOf((*MockServiceBlockchain)(nil).GetServiceInfo), arg0)
}

// SetBaseRate mocks base method.
func (m *MockServiceBlockchain) SetBaseRate(arg0, arg1 common.Address, arg2, arg3 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBaseRate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBaseRate indicates an expected call of SetBaseRate.
func (mr *MockServiceBlockchainMockRecorder) SetBaseRate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBaseRate", reflect.TypeOf((*MockServiceBlockchain)(nil).SetBaseRate), arg0, arg1, arg2, arg3)
}

// SetLoanDurationLimits mocks base method.
func (m *MockServiceBlockchain) SetLoanDurationLimits(arg0 common.Address, arg1, arg2 uint32) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLoanDurationLimits", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLoanDurationLimits indicates an expected call of SetLoanDurationLimits.
func (mr *MockServiceBlockchainMockRecorder) SetLoanDurationLimits(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLoanDurationLimits", reflect.TypeOf((*MockServiceBlockchain)(nil).SetLoanDurationLimits), arg0, arg1, arg2)
}

// SetServiceFeePercent mocks base method.
func (m *MockServiceBlockchain) SetServiceFeePercent(arg0 common.Address, arg1 uint16) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetServiceFeePercent", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetServiceFeePercent indicates an expected call of SetServiceFeePercent.
func (mr *MockServiceBlockchainMockRecorder) SetServiceFeePercent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServiceFeePercent", reflect.TypeOf((*MockServiceBlockchain)(nil).SetServiceFeePercent), arg0, arg1)
}

// Unwrap mocks base method.
func (m *MockServiceBlockchain) Unwrap(arg0 common.Address, arg1 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unwrap", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unwrap indicates an expected call of Unwrap.
func (mr *MockServiceBlockchainMockRecorder) Unwrap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unwrap", reflect.TypeOf((*MockServiceBlockchain)(nil).Unwrap), arg0, arg1)
}

// Wrap mocks base method.
func (m *MockServiceBlockchain) Wrap(arg0 common.Address, arg1 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wrap", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wrap indicates an expected call of Wrap.
func (mr *MockServiceBlockchainMockRecorder) Wrap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wrap", reflect.TypeOf((*MockServiceBlockchain)(nil).Wrap), arg0, arg1)
}

// WrapTo mocks base method.
func (m *MockServiceBlockchain) WrapTo(arg0, arg1 common.Address, arg2 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WrapTo", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WrapTo indicates an expected call of WrapTo.
func (mr *MockServiceBlockchainMockRecorder) WrapTo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrapTo", reflect.TypeOf((*MockServiceBlockchain)(nil).WrapTo), arg0, arg1, arg2)
}
